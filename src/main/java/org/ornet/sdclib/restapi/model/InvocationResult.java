/*
 * Language agnostic IEEE 11073 SDC Family REST API
 * This is a REST API description for accessing the SDC communication protocol for point-of-care (PoC) medical devices
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: softwarestacks@ornet.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.ornet.sdclib.restapi.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * InvocationResult
 */
@JsonPropertyOrder({
  InvocationResult.JSON_PROPERTY_TRANSACTION_ID,
  InvocationResult.JSON_PROPERTY_INVOCATION_STATE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-05-24T22:15:35.023266900+02:00[Europe/Berlin]")
public class InvocationResult {
  public static final String JSON_PROPERTY_TRANSACTION_ID = "transactionId";
  private Long transactionId;

  /**
   * Invocation state
   */
  public enum InvocationStateEnum {
    WAIT("Wait"),
    
    START("Start"),
    
    CNCLLD("Cnclld"),
    
    CNCLLDMAN("CnclldMan"),
    
    FIN("Fin"),
    
    FINMOD("FinMod"),
    
    FAIL("Fail");

    private String value;

    InvocationStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InvocationStateEnum fromValue(String value) {
      for (InvocationStateEnum b : InvocationStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INVOCATION_STATE = "invocationState";
  private InvocationStateEnum invocationState;


  public InvocationResult transactionId(Long transactionId) {
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(Long transactionId) {
    this.transactionId = transactionId;
  }


  public InvocationResult invocationState(InvocationStateEnum invocationState) {
    
    this.invocationState = invocationState;
    return this;
  }

   /**
   * Invocation state
   * @return invocationState
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOCATION_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InvocationStateEnum getInvocationState() {
    return invocationState;
  }


  public void setInvocationState(InvocationStateEnum invocationState) {
    this.invocationState = invocationState;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvocationResult invocationResult = (InvocationResult) o;
    return Objects.equals(this.transactionId, invocationResult.transactionId) &&
        Objects.equals(this.invocationState, invocationResult.invocationState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionId, invocationState);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvocationResult {\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    invocationState: ").append(toIndentedString(invocationState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

